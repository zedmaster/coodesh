version: 0.2

phases:
  build:
    commands:      
      # Encontrar o ID do grupo de segurança chamado "web"
      - SECURITY_GROUP_ID=$(aws ec2 describe-security-groups --filters Name=group-name,Values=web --query 'SecurityGroups[0].GroupId' --output text)
      # Iniciar uma instância EC2
      - aws ec2 run-instances --image-id ami-080e1f13689e07408 --instance-type t2.micro --subnet-id 'subnet-08153eb51832aa705' --security-group-ids $SECURITY_GROUP_ID --user-data '#!/bin/bash\napt-get update -y\napt-get install -y nginx git\ngit config --global user.name "ubuntu"\ngit config --global user.email "ubuntu@email.com"\ngit clone https://github.com/zedmaster/coodesh.git\ncp -R coodesh/app/* /var/www/html/\nservice nginx restart' > instance_output.json
      # Extrair o ID da instância criada
      - INSTANCE_ID=$(jq -r '.Instances[0].InstanceId' instance_output.json)
      # Esperar até que a instância esteja em execução
      - aws ec2 wait instance-running --instance-ids $INSTANCE_ID
      # Criar uma AMI da instância
      - AMI_ID=$(aws ec2 create-image --instance-id $INSTANCE_ID --name "V$INSTANCE_ID" --no-reboot --output text)
      # Esperar até que a AMI esteja disponível
      - aws ec2 wait image-available --image-ids $AMI_ID
      # Excluir a instância
      - aws ec2 terminate-instances --instance-ids $INSTANCE_ID
      
      # Listar e pegar o primeiro ID do launch template
      - LAUNCH_TEMPLATE_ID=$(aws ec2 describe-launch-templates --query 'LaunchTemplates[0].LaunchTemplateId' --output text)
      # Criar uma nova versão do launch template modificando o image_id
      - aws ec2 create-launch-template-version --launch-template-id $LAUNCH_TEMPLATE_ID --image-id $AMI_ID
      